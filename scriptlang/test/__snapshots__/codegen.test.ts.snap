// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`binary 1`] = `
"; ModuleID = 'demo'
source_filename = "demo"

define i32 @main(i32 %0, ptr %1) {
entry:
  %add = alloca i32, align 4
  store i32 3, ptr %add, align 4
  %dec = alloca i32, align 4
  store i32 7, ptr %dec, align 4
  %2 = load i32, ptr %add, align 4
  %3 = load i32, ptr %dec, align 4
  %4 = mul i32 %2, %3
  %mul_result = alloca i32, align 4
  store i32 %4, ptr %mul_result, align 4
}
"
`;

exports[`call 1`] = `
"; ModuleID = 'demo'
source_filename = "demo"

define i32 @main(i32 %0, ptr %1) {
entry:
  %called_func = alloca ptr, align 8
  store ptr @called_func, ptr %called_func, align 8
  %2 = load ptr, ptr %called_func, align 8
  call void %2()
  %call_ed_func_with_args = alloca ptr, align 8
  store ptr @call_ed_func_with_args, ptr %call_ed_func_with_args, align 8
  %3 = load ptr, ptr %call_ed_func_with_args, align 8
  call void %3(i32 1)
  %call_ed_func_with_return = alloca ptr, align 8
  store ptr @call_ed_func_with_return, ptr %call_ed_func_with_return, align 8
  %4 = load ptr, ptr %call_ed_func_with_return, align 8
  %5 = call i32 %4()
  %return_value = alloca i32, align 4
  store i32 %5, ptr %return_value, align 4
}

define void @called_func() {
entry:
}

define void @call_ed_func_with_args(i32 %0) {
entry:
}

define i32 @call_ed_func_with_return() {
entry:
  ret i32 1
}
"
`;

exports[`declare 1`] = `
"; ModuleID = 'demo'
source_filename = "demo"

define i32 @main(i32 %0, ptr %1) {
entry:
  %num1 = alloca i32, align 4
  store i32 1, ptr %num1, align 4
  %num2 = alloca i32, align 4
  store i32 2, ptr %num2, align 4
  %num3 = alloca i32, align 4
  store i32 -1, ptr %num3, align 4
  %float1 = alloca float, align 4
  store float 1.000000e+00, ptr %float1, align 4
  %float2 = alloca double, align 8
  store float 2.000000e+00, ptr %float2, align 4
}
"
`;

exports[`func_declare 1`] = `
"; ModuleID = 'demo'
source_filename = "demo"

define i32 @main(i32 %0, ptr %1) {
entry:
  %fn_normal = alloca ptr, align 8
  store ptr @"lambda#0", ptr %fn_normal, align 8
  %fn_argument = alloca ptr, align 8
  store ptr @"lambda#1", ptr %fn_argument, align 8
  %fn_return = alloca ptr, align 8
  store ptr @"lambda#2", ptr %fn_return, align 8
  %fn_same_name = alloca ptr, align 8
  store ptr @"lambda#3", ptr %fn_same_name, align 8
  %fn_fix_name = alloca ptr, align 8
  store ptr @fn_fix_name, ptr %fn_fix_name, align 8
}

define void @"lambda#0"() {
entry:
  %a = alloca i32, align 4
  store i32 1, ptr %a, align 4
}

define void @"lambda#1"(i32 %0) {
entry:
  %b = alloca i32, align 4
  store i32 2, ptr %b, align 4
}

define i32 @"lambda#2"() {
entry:
  %c = alloca i32, align 4
  store i32 3, ptr %c, align 4
  %0 = load i32, ptr %c, align 4
  ret i32 %0
}

define i32 @"lambda#3"() {
entry:
  %c = alloca i32, align 4
  store i32 4, ptr %c, align 4
  %0 = load i32, ptr %c, align 4
  ret i32 %0
}

define void @fn_fix_name() {
entry:
}
"
`;

exports[`if 1`] = `
"; ModuleID = 'demo'
source_filename = "demo"

define i32 @main(i32 %0, ptr %1) {
entry:
  %base_if = alloca ptr, align 8
  store ptr @base_if, ptr %base_if, align 8
  %if_only_then = alloca ptr, align 8
  store ptr @if_only_then, ptr %if_only_then, align 8
  %nesting_if = alloca ptr, align 8
  store ptr @nesting_if, ptr %nesting_if, align 8
  %elseif = alloca ptr, align 8
  store ptr @elseif, ptr %elseif, align 8
}

define void @base_if() {
entry:
  %a = alloca i32, align 4
  store i32 1, ptr %a, align 4
  %0 = load i32, ptr %a, align 4
  %1 = icmp eq i32 %0, 2
  %2 = icmp ne i1 %1, false
  br i1 %2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 3, ptr %a, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 4, ptr %a, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
}

define void @if_only_then() {
entry:
  %a = alloca i32, align 4
  store i32 1, ptr %a, align 4
  %0 = load i32, ptr %a, align 4
  %1 = icmp eq i32 %0, 2
  %2 = icmp ne i1 %1, false
  br i1 %2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 3, ptr %a, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
}

define void @nesting_if() {
entry:
  %a = alloca i32, align 4
  store i32 1, ptr %a, align 4
  %0 = load i32, ptr %a, align 4
  %1 = icmp sgt i32 %0, 2
  %2 = icmp ne i1 %1, false
  br i1 %2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, ptr %a, align 4
  %4 = icmp sgt i32 %3, 3
  %5 = icmp ne i1 %4, false
  br i1 %5, label %if.then1, label %if.else2

if.else:                                          ; preds = %entry
  %6 = load i32, ptr %a, align 4
  %7 = icmp sgt i32 %6, 6
  %8 = icmp ne i1 %7, false
  br i1 %8, label %if.then4, label %if.else5

if.end:                                           ; preds = %if.end6, %if.end3

if.then1:                                         ; preds = %if.then
  store i32 4, ptr %a, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.then
  store i32 5, ptr %a, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.else2, %if.then1
  br label %if.end

if.then4:                                         ; preds = %if.else
  store i32 7, ptr %a, align 4
  br label %if.end6

if.else5:                                         ; preds = %if.else
  store i32 8, ptr %a, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else5, %if.then4
  br label %if.end
}

define void @elseif() {
entry:
  %a = alloca i32, align 4
  store i32 1, ptr %a, align 4
  %0 = load i32, ptr %a, align 4
  %1 = icmp sgt i32 %0, 2
  %2 = icmp ne i1 %1, false
  br i1 %2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 3, ptr %a, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i32, ptr %a, align 4
  %4 = icmp sgt i32 %3, 4
  %5 = icmp ne i1 %4, false
  br i1 %5, label %if.then1, label %if.else2

if.end:                                           ; preds = %if.end3, %if.then

if.then1:                                         ; preds = %if.else
  store i32 5, ptr %a, align 4
  br label %if.end3

if.else2:                                         ; preds = %if.else
  store i32 6, ptr %a, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.else2, %if.then1
  br label %if.end
}
"
`;

exports[`while 1`] = `
"; ModuleID = 'demo'
source_filename = "demo"

define i32 @main(i32 %0, ptr %1) {
entry:
  %while_base = alloca ptr, align 8
  store ptr @while_base, ptr %while_base, align 8
  %while_break = alloca ptr, align 8
  store ptr @while_break, ptr %while_break, align 8
  %while_continue = alloca ptr, align 8
  store ptr @while_continue, ptr %while_continue, align 8
}

define void @while_base() {
entry:
  %a = alloca i32, align 4
  store i32 1, ptr %a, align 4
  br label %loop.start

loop.start:                                       ; preds = %if.end, %entry
  %0 = load i32, ptr %a, align 4
  %1 = icmp eq i32 %0, 1
  %2 = icmp ne i1 %1, false
  br i1 %2, label %if.then, label %if.else

loop.end:                                         ; preds = %if.else

if.then:                                          ; preds = %loop.start
  store i32 2, ptr %a, align 4
  br label %if.end

if.else:                                          ; preds = %loop.start
  br label %loop.end
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %loop.start
}

define void @while_break() {
entry:
  %a = alloca i32, align 4
  store i32 1, ptr %a, align 4
  br label %loop.start

loop.start:                                       ; preds = %if.end, %entry
  %0 = load i32, ptr %a, align 4
  %1 = icmp eq i32 %0, 1
  %2 = icmp ne i1 %1, false
  br i1 %2, label %if.then, label %if.else

loop.end:                                         ; preds = %if.else, %if.then

if.then:                                          ; preds = %loop.start
  br label %loop.end
  br label %if.end

if.else:                                          ; preds = %loop.start
  br label %loop.end
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %loop.start
}

define void @while_continue() {
entry:
  %a = alloca i32, align 4
  store i32 1, ptr %a, align 4
  br label %loop.start

loop.start:                                       ; preds = %if.end, %entry
  %0 = load i32, ptr %a, align 4
  %1 = icmp eq i32 %0, 1
  %2 = icmp ne i1 %1, false
  br i1 %2, label %if.then, label %if.else

loop.end:                                         ; preds = %if.else, %if.then

if.then:                                          ; preds = %loop.start
  br label %loop.end
  br label %if.end

if.else:                                          ; preds = %loop.start
  br label %loop.end
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %loop.start
}
"
`;
